"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const path_1 = require("path");
const settings_1 = require("../settings");
const __1 = __importDefault(require(".."));
const testing_1 = require("../testing");
let verbosity = settings_1.defaultSettings.verbosity;
const increaseVerbosity = () => verbosity++;
const testModes = [];
const addTestMode = (mode) => testModes.push((0, testing_1.asTestMode)(mode));
const testFiles = [];
const addTestFile = (file) => testFiles.push(file);
const canisterNames = [];
const addCanisterName = (name) => canisterNames.push(name);
const deployArgs = [];
const addDeployArg = (arg) => deployArgs.push(arg);
const examples = [
    ['-d', 'redeploy canisters on file change'],
    ['-d -y', 'upgrade canisters on file change'],
    ['-g', 'generate TypeScript bindings on file change'],
    ['-t', 'run unit tests on file change'],
    [
        '-r -c foo_canister -c bar_canister',
        'redeploy `foo_canister` and `bar_canister` on file change',
    ],
];
const { cwd, version, port, delay, exec, generate, deploy, test, yes, hotReload, } = commander_1.program
    .name('mo-dev')
    .description(`Examples:\n${examples
    .map(([usage, description]) => `  $ mo-dev ${usage}  # ${description}`)
    .join('\n')}`)
    .option('-V, --version', `show installed version`)
    .option('-C, --cwd <cwd>', 'directory containing a `dfx.json` file')
    .option('-d, --deploy', `run \`dfx deploy\` on file change`)
    .option('-t, --test', `run unit tests on file change`)
    .option('--testmode <mode>', `default test mode (interpreter, wasi)`, addTestMode)
    .option('-f, --testfile <prefix>', `only run tests with the given file name prefix`, addTestFile)
    .option('-c, --canister <canister>', `use the given Motoko canister`, addCanisterName)
    .option('-a, --argument <arg>', `pass an install argument to \`dfx deploy\``, addDeployArg)
    .option('-y, --yes', `respond "yes" to reinstall prompts (may reset canister state)`)
    .option('-g, --generate', `run \`dfx generate\` on file change`)
    .option('-x, --exec <exec>', `execute command on file change`)
    .option('-v, --verbose', `show more details in console`, increaseVerbosity)
    .addOption(new commander_1.Option('--hot-reload', `hot module replacement server (experimental)`).hideHelp())
    .addOption(new commander_1.Option('--port <port>', `hot module replacement server port (default: ${settings_1.defaultSettings.port})`).hideHelp())
    .parse()
    .opts();
if (version) {
    console.log('mo-dev', require('../../package.json').version);
    process.exit(0);
}
const settings = {
    directory: (0, path_1.resolve)(cwd || settings_1.defaultSettings.directory),
    port: port ? +port : settings_1.defaultSettings.port,
    delay: !!delay || settings_1.defaultSettings.delay,
    execute: exec || settings_1.defaultSettings.execute,
    verbosity,
    generate: !!generate || settings_1.defaultSettings.generate,
    deploy: !!deploy || settings_1.defaultSettings.deploy,
    deployArgs: deployArgs.length ? deployArgs : settings_1.defaultSettings.deployArgs,
    test: !!test || settings_1.defaultSettings.test,
    testModes: testModes.length ? testModes : settings_1.defaultSettings.testModes,
    testFiles: testFiles.length ? testFiles : settings_1.defaultSettings.testFiles,
    canisterNames: canisterNames.length
        ? canisterNames
        : settings_1.defaultSettings.canisterNames,
    reinstall: !!yes || settings_1.defaultSettings.reinstall,
    hotReload: !!hotReload || settings_1.defaultSettings.hotReload,
    // ci: !!ci || defaultSettings.ci,
    ci: settings_1.defaultSettings.ci,
};
(0, __1.default)(settings).catch((err) => {
    console.error(err.stack || err);
    process.exit(1);
});
//# sourceMappingURL=mo-dev.js.map