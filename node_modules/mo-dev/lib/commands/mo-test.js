"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const path_1 = require("path");
const settings_1 = require("../settings");
const testing_1 = require("../testing");
let verbosity = settings_1.defaultSettings.verbosity;
const increaseVerbosity = () => verbosity++;
const testModes = [];
const addTestMode = (mode) => testModes.push((0, testing_1.asTestMode)(mode));
const testFiles = [];
const addTestFile = (file) => testFiles.push(file);
const examples = [
    [
        '--testmode wasi',
        'Use the WASI runtime by default (faster but requires `wasmtime` on your system path)',
    ],
    [
        '--testmode wasi --testmode interpreter',
        'Use both the interpreter and WASI runtimes by default',
    ],
    ['-f MyTest', 'Only run tests with file names starting with `MyTest`'],
    [
        '-f Foo -f Bar',
        'Only run tests with file names starting with either `Foo` or `Bar`',
    ],
];
const { cwd, version } = commander_1.program
    .name('mo-test')
    .description(`Examples:\n${examples
    .map(([usage, description]) => `  $ mo-test ${usage}  # ${description}`)
    .join('\n')}`)
    .option('-V, --version', `show installed version`)
    .option('-C, --cwd <cwd>', 'directory containing a `dfx.json` file')
    .option('--testmode <mode>', `default test mode (interpreter, wasi)`, addTestMode)
    .option('-f, --testfile <prefix>', `only run tests with the given file name prefix`, addTestFile)
    .option('-v, --verbose', `show more details in console`, increaseVerbosity)
    .parse()
    .opts();
if (version) {
    console.log('mo-test', require('../../package.json').version);
    process.exit(0);
}
const settings = {
    directory: (0, path_1.resolve)(cwd || settings_1.defaultSettings.directory),
    testModes: testModes.length ? testModes : settings_1.defaultSettings.testModes,
    testFiles: testFiles.length ? testFiles : settings_1.defaultSettings.testFiles,
    verbosity,
};
(0, testing_1.runTests)(settings)
    .then((runs) => {
    if (runs.length === 0 ||
        runs.some((run) => run.status !== 'passed' && run.status !== 'skipped')) {
        process.exit(1);
    }
})
    .catch((err) => {
    console.error(err.stack || err);
    process.exit(1);
});
//# sourceMappingURL=mo-test.js.map