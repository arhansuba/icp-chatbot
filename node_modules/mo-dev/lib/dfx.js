"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadDfxSources = exports.loadDfxConfig = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const execa_1 = __importDefault(require("execa"));
function loadDfxConfig(directory) {
    return __awaiter(this, void 0, void 0, function* () {
        const dfxPath = (0, path_1.resolve)(directory, 'dfx.json');
        if (!(0, fs_1.existsSync)(dfxPath)) {
            return;
        }
        return JSON.parse((0, fs_1.readFileSync)(dfxPath, 'utf8'));
    });
}
exports.loadDfxConfig = loadDfxConfig;
function loadDfxSources(directory) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const dfxConfig = yield loadDfxConfig(directory);
        const packtool = (_b = (_a = dfxConfig === null || dfxConfig === void 0 ? void 0 : dfxConfig.defaults) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.packtool;
        if (!packtool) {
            return;
        }
        const packtoolResult = yield (0, execa_1.default)(packtool, {
            shell: true,
            cwd: directory,
            reject: false,
        });
        if (packtoolResult.failed) {
            throw new Error(`Error while running 'defaults.build.packtool' command from dfx.json file in ${directory}`);
        }
        return packtoolResult.stdout.replace(/\n/g, ' ');
    });
}
exports.loadDfxSources = loadDfxSources;
//# sourceMappingURL=dfx.js.map