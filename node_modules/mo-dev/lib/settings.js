"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSettings = exports.defaultSettings = void 0;
const picocolors_1 = __importDefault(require("picocolors"));
const dfx_1 = require("./dfx");
exports.defaultSettings = {
    directory: '.',
    port: 7700,
    delay: false,
    execute: '',
    verbosity: 0,
    generate: false,
    deploy: false,
    deployArgs: [],
    test: false,
    testModes: ['interpreter'],
    testFiles: [],
    canisterNames: [],
    reinstall: false,
    hotReload: false,
    ci: process.env.CI && process.env.CI !== '0' && process.env.CI !== 'false',
};
function validateSettings(settings) {
    return __awaiter(this, void 0, void 0, function* () {
        const resolvedSettings = Object.assign(Object.assign({}, exports.defaultSettings), settings);
        if (!(yield (0, dfx_1.loadDfxConfig)(resolvedSettings.directory))) {
            console.error(picocolors_1.default.yellow(`Please specify a directory containing a \`dfx.json\` config file.`));
            console.error();
            console.error(picocolors_1.default.bold(`Example:`), '$ mo-dev -c path/to/my/dfx_project');
            console.error();
            process.exit(1);
        }
        return resolvedSettings;
    });
}
exports.validateSettings = validateSettings;
//# sourceMappingURL=settings.js.map