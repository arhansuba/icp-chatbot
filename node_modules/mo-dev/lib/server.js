"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serve = void 0;
const http_1 = require("http");
const app_1 = __importDefault(require("./app"));
const picocolors_1 = __importDefault(require("picocolors"));
function serve(settings) {
    return __awaiter(this, void 0, void 0, function* () {
        if (settings.verbosity >= 1 && settings.delay) {
            console.log(picocolors_1.default.gray('Adding artificial delay'));
        }
        const devServerPort = +process.env.PORT || settings.port;
        const app = (0, app_1.default)(settings);
        const server = (0, http_1.createServer)(app);
        server.listen(devServerPort);
        console.log(`HMR server listening on port ${picocolors_1.default.bold(devServerPort)}`);
        return server;
    });
}
exports.serve = serve;
//# sourceMappingURL=server.js.map