"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const body_parser_1 = require("body-parser");
const motoko_1 = require("../utils/motoko");
const wasm_1 = __importDefault(require("../wasm"));
const watch_1 = require("../watch");
const candid_1 = require("@dfinity/candid");
exports.default = (app, { delay }) => {
    app.post('/call/:alias([^/]+)/:method', (0, body_parser_1.json)(), (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        try {
            const { alias, method } = req.params;
            const message = req.body;
            console.log(`${alias}.${method}`, message);
            const args = (message === null || message === void 0 ? void 0 : message.args) || [];
            if (!Array.isArray(args)) {
                return res
                    .status(400)
                    .json({ message: '`args` must be an array' });
            }
            const canister = (0, watch_1.findCanister)(alias);
            if (!canister) {
                return res
                    .status(400)
                    .json({ message: `Unknown canister: ${canister}` });
            }
            const candidSource = (0, motoko_1.getVirtualFile)(canister.file).candid();
            const candidJs = wasm_1.default.candid_to_js(candidSource);
            if (!candidJs) {
                return res.status(400).json({
                    message: `Unable to parse Candid for canister: ${alias}`,
                });
            }
            const idlFactory = (yield eval(`import(${JSON.stringify(`data:text/javascript;charset=utf-8,${encodeURIComponent(candidJs)}`)})`)).idlFactory;
            const service = idlFactory({ IDL: candid_1.IDL });
            const field = (_a = service._fields.find(([m]) => m === method)) === null || _a === void 0 ? void 0 : _a[1];
            if (!field) {
                return res.status(400).json({
                    message: `Unknown canister method: ${alias}.${method}`,
                });
            }
            const candid = candid_1.IDL.encode(field.argTypes, args);
            const value = wasm_1.default.call_canister(alias, method, new Uint8Array(candid));
            console.log('Result:', JSON.stringify(value));
            res.json({
                value,
            });
        }
        catch (err) {
            next(err);
        }
    }));
};
// export default router;
//# sourceMappingURL=canister.js.map